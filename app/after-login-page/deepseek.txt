// ... (previous imports and interfaces remain the same)

export default function AfterLoginPage() {
  // ... (previous state declarations remain the same)

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex">
      {/* ... (sidebar and header code remains the same until the main content area) */}

      {/* Main Content Area */}
      <main className="flex-1 p-4 sm:p-6">
        {/* Purchase Prompt Banner when trial is blocked */}
        {gating?.trialBlocked && (
          <div className="mb-4 rounded-lg border border-yellow-400/40 bg-yellow-500/10 text-yellow-100 p-4">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
              <div className="text-sm">
                {gating.reason === 'credits_exhausted' ? (
                  <>
                    <strong className="font-semibold">Free trial ended.</strong> Your 10 free auth credits have been used. To continue using the service, please purchase a plan.
                  </>
                ) : (
                  <>
                    <strong className="font-semibold">Access paused due to inactivity.</strong> You've been inactive for 90+ days. Buy a plan to keep using the service.
                  </>
                )}
              </div>
              <div>
                <Button
                  onClick={() => {
                    const link = (gating?.purchaseLink || process.env.NEXT_PUBLIC_PAYMENT_LINK_URL || '').toString();
                    if (link) {
                      window.location.href = link;
                    } else {
                      alert('Payment link not configured. Please set NEXT_PUBLIC_PAYMENT_LINK_URL.');
                    }
                  }}
                  className="bg-yellow-500 hover:bg-yellow-600 text-black font-medium"
                >
                  Buy a plan
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Organization Tab - Updated to match other pages */}
        {activeTab === 'organization' && (
          <div className="space-y-6">
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-white mb-2">Organization</h1>
              <p className="text-white/80">Manage your organization, members, API tokens, and groups.</p>
            </div>

            {/* Organization Card */}
            <Card className="bg-white/10 backdrop-blur-sm border border-white/20">
              <CardHeader>
                <CardTitle className="text-white flex items-center justify-between">
                  <span>Organization Details</span>
                  <span className="text-sm text-white/70">Auth Credits: {orgBalance}</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {!org ? (
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="orgName" className="text-white/90">Organization Name</Label>
                      <Input 
                        id="orgName"
                        value={orgNameInput} 
                        onChange={(e) => setOrgNameInput(e.target.value)} 
                        placeholder="Enter organization name" 
                        className="bg-white/10 border-white/20 text-white placeholder:text-white/50 rounded-xl mt-2" 
                      />
                    </div>
                    <Button 
                      onClick={createOrg} 
                      disabled={orgLoading} 
                      className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                    >
                      {orgLoading ? 'Creating…' : 'Create Organization'}
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-6">
                    {/* Organization Name Section */}
                    <div className="space-y-3">
                      <Label htmlFor="updateOrgName" className="text-white/90">Organization Name</Label>
                      <div className="flex gap-2">
                        <Input 
                          id="updateOrgName"
                          value={orgNameInput} 
                          onChange={(e) => setOrgNameInput(e.target.value)} 
                          className="bg-white/10 border-white/20 text-white placeholder:text-white/50 rounded-xl" 
                        />
                        <Button 
                          onClick={updateOrgName} 
                          disabled={orgLoading} 
                          className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                        >
                          {orgLoading ? 'Saving…' : 'Save'}
                        </Button>
                      </div>
                    </div>

                    {/* Members and Tokens Grid */}
                    <div className="grid md:grid-cols-2 gap-6">
                      {/* Members Section */}
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h3 className="text-white font-medium">Organization Members</h3>
                        </div>
                        
                        {/* Add Member Form */}
                        <div className="space-y-3 p-4 bg-white/5 rounded-lg border border-white/10">
                          <div className="grid gap-3">
                            <Input 
                              value={memberEmail} 
                              onChange={(e) => setMemberEmail(e.target.value)} 
                              placeholder="Member email" 
                              className="bg-white/10 border-white/20 text-white placeholder:text-white/50 rounded-xl" 
                            />
                            <Input 
                              value={memberPhone} 
                              onChange={(e) => setMemberPhone(e.target.value)} 
                              placeholder="Member phone (10-digit)" 
                              className="bg-white/10 border-white/20 text-white placeholder:text-white/50 rounded-xl" 
                            />
                            <select 
                              value={memberRole} 
                              onChange={(e) => setMemberRole(e.target.value as any)} 
                              className="bg-white/10 border border-white/20 text-white rounded-xl px-3 py-2"
                            >
                              <option value="member">Member</option>
                              <option value="admin">Admin</option>
                            </select>
                          </div>
                          <Button 
                            onClick={addMember} 
                            disabled={orgLoading} 
                            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                          >
                            {orgLoading ? 'Adding…' : 'Add Member'}
                          </Button>
                        </div>

                        {/* Members List */}
                        <div className="overflow-x-auto">
                          <table className="w-full text-sm">
                            <thead>
                              <tr className="border-b border-white/20">
                                <th className="text-left py-3 px-4 font-medium text-white">User</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Email</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Phone</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Role</th>
                              </tr>
                            </thead>
                            <tbody>
                              {orgMembers.length === 0 ? (
                                <tr>
                                  <td colSpan={4} className="text-center text-white/60 py-4">
                                    No members yet
                                  </td>
                                </tr>
                              ) : (
                                orgMembers.map((m) => (
                                  <tr key={m.userId} className="border-b border-white/10">
                                    <td className="py-3 px-4 text-white/90">{m.name || m.phone || m.email || m.userId}</td>
                                    <td className="py-3 px-4 text-white/90">{m.email || '—'}</td>
                                    <td className="py-3 px-4 text-white/90">{m.phone ? `+${m.phone}` : '—'}</td>
                                    <td className="py-3 px-4 text-white/90">
                                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                        m.role === 'admin' 
                                          ? 'bg-purple-100 text-purple-800' 
                                          : 'bg-blue-100 text-blue-800'
                                      }`}>
                                        {m.role}
                                      </span>
                                    </td>
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>

                      {/* API Tokens Section */}
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h3 className="text-white font-medium">API Tokens</h3>
                          <Button 
                            onClick={createOrgToken} 
                            disabled={orgLoading} 
                            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                          >
                            {orgLoading ? 'Creating…' : 'Create Token'}
                          </Button>
                        </div>

                        <div className="overflow-x-auto">
                          <table className="w-full text-sm">
                            <thead>
                              <tr className="border-b border-white/20">
                                <th className="text-left py-3 px-4 font-medium text-white">Token</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Active</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Created</th>
                                <th className="text-left py-3 px-4 font-medium text-white">Actions</th>
                              </tr>
                            </thead>
                            <tbody>
                              {orgTokens.length === 0 ? (
                                <tr>
                                  <td colSpan={4} className="text-center text-white/60 py-4">
                                    No tokens yet
                                  </td>
                                </tr>
                              ) : (
                                orgTokens.map((t) => (
                                  <tr key={t.id} className="border-b border-white/10">
                                    <td className="py-3 px-4 text-white/90 max-w-[200px] truncate" title={t.token}>
                                      {t.token}
                                    </td>
                                    <td className="py-3 px-4 text-white/90">
                                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                        t.active 
                                          ? 'bg-green-100 text-green-800' 
                                          : 'bg-red-100 text-red-800'
                                      }`}>
                                        {t.active ? 'Yes' : 'No'}
                                      </span>
                                    </td>
                                    <td className="py-3 px-4 text-white/90">{t.createdAt}</td>
                                    <td className="py-3 px-4">
                                      <Button 
                                        onClick={() => toggleOrgToken(t.id, !t.active)} 
                                        variant="outline" 
                                        className="bg-white/10 border-white/20 text-white hover:bg-white/20 cursor-pointer"
                                      >
                                        {t.active ? 'Disable' : 'Enable'}
                                      </Button>
                                    </td>
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>

                    {/* Groups Section */}
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-white font-medium">Organization Groups</h3>
                      </div>

                      {/* Create Group Form */}
                      <div className="flex gap-2 items-center p-4 bg-white/5 rounded-lg border border-white/10">
                        <Input 
                          value={newGroupName} 
                          onChange={(e) => setNewGroupName(e.target.value)} 
                          placeholder="Group name" 
                          className="bg-white/10 border-white/20 text-white placeholder:text-white/50 rounded-xl flex-1" 
                        />
                        <Button 
                          onClick={createGroup} 
                          disabled={orgLoading} 
                          className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                        >
                          {orgLoading ? 'Creating…' : 'Create Group'}
                        </Button>
                      </div>

                      {/* Groups List */}
                      <div className="overflow-x-auto">
                        <table className="w-full text-sm">
                          <thead>
                            <tr className="border-b border-white/20">
                              <th className="text-left py-3 px-4 font-medium text-white">Group Name</th>
                              <th className="text-left py-3 px-4 font-medium text-white">Created Date</th>
                            </tr>
                          </thead>
                          <tbody>
                            {orgGroups.length === 0 ? (
                              <tr>
                                <td colSpan={2} className="text-center text-white/60 py-4">
                                  No groups yet
                                </td>
                              </tr>
                            ) : (
                              orgGroups.map((g) => (
                                <tr key={g.id} className="border-b border-white/10">
                                  <td className="py-3 px-4 text-white/90">{g.name}</td>
                                  <td className="py-3 px-4 text-white/90">{g.createdAt}</td>
                                </tr>
                              ))
                            )}
                          </tbody>
                        </table>
                      </div>

                      {/* Add Member to Group */}
                      <div className="p-4 bg-white/5 rounded-lg border border-white/10">
                        <h4 className="text-white font-medium mb-3">Add Member to Group</h4>
                        <div className="grid sm:grid-cols-3 gap-3 items-center">
                          <select 
                            value={groupSelectId} 
                            onChange={(e) => setGroupSelectId(e.target.value ? Number(e.target.value) : '')} 
                            className="bg-white/10 border border-white/20 text-white rounded-xl px-3 py-2"
                          >
                            <option value="">Select group</option>
                            {orgGroups.map(g => (
                              <option key={g.id} value={g.id}>{g.name}</option>
                            ))}
                          </select>
                          <select 
                            value={groupSelectUserId} 
                            onChange={(e) => setGroupSelectUserId(e.target.value ? Number(e.target.value) : '')} 
                            className="bg-white/10 border border-white/20 text-white rounded-xl px-3 py-2"
                          >
                            <option value="">Select member</option>
                            {orgMembers.map(m => (
                              <option key={m.userId} value={m.userId}>{m.name || m.email || m.phone || m.userId}</option>
                            ))}
                          </select>
                          <Button 
                            onClick={addMemberToGroup} 
                            disabled={orgLoading} 
                            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-md hover:shadow-lg cursor-pointer"
                          >
                            {orgLoading ? 'Adding…' : 'Add to Group'}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* ... (other tab contents remain the same) */}
      </main>

      {/* ... (footer and other components remain the same) */}
    </div>
  );
}